<html py:extends="master.xhtml" py:strip="True">
<head py:block="head" py:strip="True">
    <title py:block="master_title">KS | New Q/A</title>
    <style>
        .form-check-inline > input { display: none; }
        input:checked + label img { border: 2px solid #0072e5; }
        label img { border: 2px solid transparent; cursor: pointer; }
    </style>
    <script id="QAForm_template" type="text/html">
        <![CDATA[
        <form class="form-horizontal" on-submit="submit-form">
            <div class="row mt-2 pb-3 mb-3 border-bottom">
                <h1 class="col type-page-title">New Q/A</h1>
                <div class="col-md-auto text-right">
                    {{#if saving}}
                        ${_("Saving...")}
                    {{else}}
                        <button type="submit" class="btn btn-outline-success">${h.material_icon('save')} ${_("Save")}</button>
                    {{/if}}
                </div>
            </div>

            <div class="form-group row">
                <div class="col-4">
                    <textarea id="extra-fields-form-question" type="text" class="form-control  {{errors.question ? 'is-invalid' : ''}}"
                              placeholder="${_('Content of the question')}" value="{{create.question}}">
                    </textarea>
                    {{#if errors.question}}
                        <span class="invalid-feedback">{{errors.question}}</span>
                    {{/if}}
                </div>
                <label for="extra-fields-form-question" class="col help-text">${h.material_icon('help_outline')} ${_("Insert a question that user will answer in the questionary. e.g. What's your name?")}</label>
            </div>


            <div class="form-group row">
                <div class="col-4">
                    <input id="extra-fields-form-title" type="text" class="form-control {{errors.title ? 'is-invalid' : ''}}" placeholder="${_('Label')}"
                           value="{{create.title}}"/>
                    {{#if errors.title}}
                        <span class="invalid-feedback">{{errors.title}}</span>
                    {{/if}}
                </div>
                <label for="extra-fields-form-question" class="col help-text">${h.material_icon('help_outline')} ${_("This is a unique name that you will use to refer to this object in this workspace.")}</label>
            </div>

            <div class="row">
                <div class="col-4">
                    <select id="form-precondition" class="custom-select {{errors.precondition ? 'is-invalid' : ''}}" value="{{create.precondition}}">
                        <option value="" selected>${_("Add an optional filter to this Q/A")}</option>
                        {{#each preconditions}}
                            <option value="{{._id}}">{{{.title}}}</option>
                        {{/each}}
                    </select>

                    {{#if errors.precondition}}
                        <span class="invalid-feedback">{{errors.precondition}}</span>
                    {{/if}}
                </div>
                <div class="col">
                    <a href="${tg.url('/precondition/simple/new', params=dict(workspace=workspace))}&question_content={{create.question}}&question_title={{create.title}}"
                       id="create-filter" class="btn btn-outline-success d-inline-block">
                        ${h.material_icon('save')} ${_("New Simple Filter")}
                    </a>
                </div>
            </div>

            <div class="row">
                <div class="col font-weight-bold text-primary my-3">
                    ${_("Answer's type")}
                </div>
            </div>

            <div class="form-group row">
                <div class="col">
                    <div class="form-check form-check-inline">
                      <input class="form-check-input" type="radio" name="{{answer_type}}"
                             id="single" value="single" onclick="ractive_qa.switchResponseType('single');" />
                      <label class="form-check-label" for="single">
                        <img src="${tg.url('/img/radio_single.png')}" alt="Single"/>
                      </label>
                    </div>

                    <div class="form-check form-check-inline">
                      <input class="form-check-input {{errors.answer_type ? 'is-invalid' : ''}}" type="radio" name="{{answer_type}}"
                             id="multi" value="multi" onclick="ractive_qa.switchResponseType('multi');" />
                      <label class="form-check-label" for="multi">
                        <img src="${tg.url('/img/radio_multi.png')}" alt="Single"/>
                      </label>
                    </div>

                    <div class="form-check form-check-inline">
                      <input class="form-check-input {{errors.answer_type ? 'is-invalid' : ''}}" type="radio" name="{{answer_type}}"
                             id="text" value="text" onclick="ractive_qa.switchResponseType('text');" />
                      <label class="form-check-label" for="text">
                        <img src="${tg.url('/img/radio_text.png')}" alt="Single"/>
                      </label>
                      {{#if errors.answer_type}}
                        <span class="invalid-feedback">{{errors.answer_type}}</span>
                      {{/if}}
                    </div>
                </div>
            </div>

            {{#if answer_type == 'single' || answer_type == 'multi'}}
                <div class="form-group col">
                    {{#each available_response:i}}
                        {{#if .display}}
                            <div class="answer">
                                <input type="{{input_type}}" name="example_response">
                                    {{#if .editable}}
                                        <textarea id="{{.answer}}" class="form-control d-inline-block response response-text" autofocus
                                                               value="{{.answer}}" onblur="ractive_qa.editAnswer('{{i}}')"> </textarea>

                                    {{else}}
                                        <pre id={{.answer}} class="response d-inline-block m-0"
                                             onclick="ractive_qa.makeEditable('{{i}}')">{{.answer}}</pre>
                                    {{/if}}
                                {{#if ! edit_mode}}
                                    <label onclick="ractive_qa.removeResponse('{{i}}')">${h.material_icon('delete')}</label>
                                {{/if}}
                            </div>
                        {{/if}}
                    {{/each}}

                    <div class="row">
                        <div class="form-inline col-4">
                            <textarea id="response_text" class="form-control {{errors.answers ? 'is-invalid' : ''}}" placeholder="${_('Insert an option of Answer and click on +')}"> </textarea>
                            <label for="response_text" class="displ"
                                   onclick="ractive_qa.addResponse()">${h.material_icon('add_circle_outline')}</label>
                            {{#if errors.answers}}
                                <span class="invalid-feedback">{{errors.answers}}</span>
                            {{/if}}
                        </div>
                    </div>
                </div>
            {{/if}}

            {{#if answer_type == 'text'}}
                <div class="form-group">
                    <div class="col">Essay text answer</div>
                </div>
            {{/if}}
        </form>
        ]]>
    </script>
</head>

<body py:block="body" py:strip="True">

<div id="qa-ractive"></div>

<script>
    var QAEditor = Ractive.extend({
        template: '#QAForm_template',
        onconstruct: function (options) {
            var self = this;
            self.qa = options['qa'];
            self.edit_mode = false;
            self.submit_url = "${tg.url('/qa/post')}";
            self.submit_type = 'POST';
            self.workspace = options['workspace'];
            self.question_content = options['question_content'];
            self.question_title = options['question_title'];
            self.precondition_id= options['precondition_id'];
        },
        oninit: function () {
            var self = this;
            self.set('errors', {});
            self.set('saving', false);
            self.set('answer_type', null);
            self.set('input_type', null);
            self.set('available_response', []);
            self.set('create.category', self.workspace);

            self.set('create.title', self.qa['title']);
            self.set('create.question', self.qa['question']);
            self.set('create.precondition', self.qa['_parent_precondition']);

            //  Check if document is provided
            if (self.qa['_id']) {
                self.submit_type = 'PUT';
                self.submit_url = '${tg.url('/qa/put')}';
                self.set('edit_mode', true);
                self.set('create.title', self.qa['title']);
                self.set('create.question', self.qa['question']);
                self.set('create.precondition', self.qa['_parent_precondition']);
                self.set('create.link', self.qa['link']);
                self.set('create.tooltip', self.qa['tooltip']);
                self.set('create._id', self.qa['_id']);

                var available_response = [];
                for (var i in self.qa['answers']) {
                    available_response.push({
                        'answer': self.qa['answers'][i],
                        'editable': false, 'type': self.qa['type'], 'display': true
                    });
                }
                self.switchResponseType(self.qa['type']);
                self.set('available_response', available_response);
            }

            self.on('submit-form', function (event) {
                var all_var = self.get('create');
                // Now append answer_type and answers
                all_var['answer_type'] = self.get('answer_type');
                var answers = [];
                var available_response = self.get('available_response');
                for (var i in available_response) {
                    if (available_response[i]['display']) {
                        answers.push(available_response[i]['answer']);
                    }
                }
                all_var['answers'] = answers;
                self.createQA(all_var);
                return false;
            });
            self.loadPrecondition();
        },
        loadPrecondition: function (callback) {
            var self = this;
            jQuery.get("${tg.url('/precondition/available_preconditions',  params=dict(workspace=workspace))}",
                    function (data) {
                        self.set('preconditions', data['preconditions']);
                        if (callback)
                            callback();
                    });
        },
        switchResponseType: function (section) {
            var self = this;
            var available_response = self.get('available_response');

            if (section == 'single')
                self.set('input_type', 'radio');
            if (section == 'multi')
                self.set('input_type', 'checkbox');
            for (var i in available_response) {
                if (available_response[i]['type'] == section) {
                    available_response[i]['display'] = true;
                } else {
                    available_response[i]['display'] = false;
                }
            }
            jQuery("#insert_answer").empty();

            self.set('answer_type', section);
            self.set('available_response', available_response);
        },
        addResponse: function () {
            var self = this;
            jQuery("#insert_answer").empty();
            var resp = jQuery("#response_text").val();
            if (!resp || 0 === resp.length || /^\s*$/.test(resp)) {
                alert("Risposta non valida");
                return;
            }
            jQuery("#response_text").val("");
            self.push('available_response', {
                'answer': resp,
                'editable': false,
                'type': self.get('answer_type'),
                'display': true
            });
        },

        makeEditable: function (response) {
            var self = this;
            var available_response = self.get('available_response');
            var edit_mode = self.get('edit_mode');
            if (!edit_mode) {
                available_response[response]['editable'] = true;
                self.set('available_response', available_response);
            }
        },
        editAnswer: function (index) {
            var self = this;
            var available_response = self.get('available_response');
            available_response[index]['editable'] = false;
            available_response[index]['answer'] = jQuery("#" + available_response[index]['answer']).val();
            self.set('available_response', available_response);

        },
        removeResponse: function (index) {
            var self = this;
            var available_response = self.get('available_response');
            self.splice('available_response', index, 1);
        },
        createQA: function (field) {
            var self = this;
            self.set('saving', true);
            var api_params = JSON.stringify(field);
            $.ajax({
                type: self.submit_type,
                url: self.submit_url,
                data: api_params,
                dataType: "json",
                processData: false,
                contentType: 'application/json'
            }).done(function (resp) {
                var redirect_to = "${tg.url('/qa', params=dict(workspace=workspace))}";
                if ("${value_of('referrer','')}" !== "") {
                    redirect_to =
                        "${tg.url('/precondition/simple/new', params=dict(workspace=workspace))}";
                    redirect_to += "&amp;qa_value=" + resp._id;
                }
                self.set('create', {});
                self.set('saving', false);
                self.set('editing', false);
                if (resp.redirect_url)
                    redirect_to = resp.redirect_url;
                window.location.replace(redirect_to);

            }).fail(function (jqXHR) {
                if (jqXHR.status != 500) {
                    var data = jQuery.parseJSON(jqXHR.responseText);
                    self.set('errors', data.errors);
                    self.set('saving', false);
                }
            });
        }
    });
</script>
<script>
    var ractive_qa = new QAEditor({
        qa: ${Markup(h.script_json_encode(qa))},
        el: '#qa-ractive',
        workspace: '${workspace}'
    });
</script>
</body>
</html>
