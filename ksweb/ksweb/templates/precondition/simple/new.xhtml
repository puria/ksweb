<html py:extends="master.xhtml" py:strip="True">
<head py:block="head" py:strip="True">
    <title py:block="master_title">KS | Filters</title>
    <script id="PreconditionSimpleForm_template" type="text/html">
        <![CDATA[
        <form id="precondition-simple-form" class="form-horizontal" on-submit="submit-form">
            <div class="row mt-2 pb-3 mb-3 border-bottom">
                <h1 class="col type-page-title">${_('Simple filter')}</h1>
                <div class="col-md-auto text-right">
                    {{#if saving}}
                    ${_("Saving...")}
                    {{else}}
                    <button type="submit" class="btn btn-outline-success">
                        ${h.material_icon('save')}
                        ${_("Save")}
                    </button>
                    {{/if}}
                </div>
            </div>

            <div class="form-group row align-items-center">
                <div class="col-4">
                    <select id="selected_question" value="{{create.question}}"
                            class="custom-select {{errors.question ? 'is-invalid' : ''}}">
                        <option value="" disabled selected>${_('Select a question')}</option>
                        {{#each questions}}
                        <option value="{{._id}}">{{.title}}</option>
                        {{/each}}
                    </select>
                    {{#if errors.question}}<span class="invalid-feedback">{{errors.question}}</span>{{/if}}
                </div>
                <a href="${tg.url('/qa/new', params=dict(workspace=workspace, referrer='new_filter'))}"
                   id="create-filter" class="btn btn-outline-success d-inline-block">
                    ${h.material_icon('save')} ${_('New Question')}
                </a>
                <label for="selected_question" class="col help-text">
                    ${h.material_icon('help_outline')} ${_('Select the question to use for this filter.')}</label>
            </div>

            <div id="answer_type" class="">
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="{{create.answer_type}}"
                           value="have_response" id="have_response" disabled="{{edit_mode}}"/>
                    <label class="form-check-label" for="have_response">
                        ${_('The question was just answered')}
                    </label>
                </div>

                <div class="form-check">
                    <input type="radio" name="{{create.answer_type}}" value="what_response" id="what_response"
                           class="form-check-input {{errors.answer_type ? 'is-invalid' : ''}}" checked=""/>
                    <label class="form-check-label" for="what_response">
                        ${_('The user selects one of the following answers')}
                    </label>
                    {{#if errors.answer_type}}<span class="invalid-feedback">{{errors.answer_type}}</span>{{/if}}
                </div>
            </div>


            <div id="interested_response" style="display: none">
                <div class="form-check form-check-inline">
                    {{#each available_reponse}}
                        {{#if !edit_mode}}
                        <input class="form-check-input ml-4 {{errors.interested_response ? 'is-invalid' : ''}}" type="checkbox" name="{{create.interested_response}}" value="{{.}}" id="{{.}}">
                        {{.}}
                        {{else}}
                        {{#if create.interested_response == .}}
                        <input class="form-check-input ml-4 {{errors.interested_response ? 'is-invalid' : ''}}"
                               type="radio" name="{{create.interested_response}}" value="{{.}}"
                               checked>
                        {{.}}
                        {{else}}
                        <input class="form-check-input ml-4 {{errors.interested_response ? 'is-invalid' : ''}}"
                               type="radio" name="{{create.interested_response}}" value="{{.}}"> {{.}}
                        {{/if}}
                        {{/if}}
                    {{/each}}

                    {{#if errors.interested_response}}
                    <span class="ml-4 invalid-feedback">{{errors.interested_response}}</span>
                    {{/if}}
                </div>
            </div>

            <div class="form-group row align-items-center">
                <div class="col-4">
                    <input id="extra-fields-form-title" type="text" class="form-control {{errors.title ? 'is-invalid' : ''}}"
                           placeholder="${_('Label')}" name="{{create.title}}" value="{{create.title}}"/>
                    {{#if errors.title}}
                    <span class="help-block">{{errors.title}}</span>
                    {{/if}}
                </div>
                <label for="extra-fields-form-question" class="help-text">
                    ${h.material_icon('help_outline')}
                    ${_('This is a unique name that you will use to refer to this object in this workspace.')}
                </label>
            </div>
        </form>
        ]]>
    </script>
</head>

<body py:block="body" py:strip="True">
<div id="qa-ractive"></div>
<script>
//<![CDATA[
  var PreconditionSimple = Ractive.extend({
    template: '#PreconditionSimpleForm_template',
    onconstruct: function(ctx, options) {
      var self = this;
      self.precondition = options['precondition'];
      self.edit_mode = false;
      self.submit_url = "${tg.url('/precondition/simple/post')}";
      self.submit_type = 'POST';
      self.workspace=options['workspace'];
      self.question_content=self.precondition['question_content'];
      self.question_title=self.precondition['question_title'];
      self.qa_value=options['qa_value'];
    },
    oninit: function() {
      var self = this;
      self.set('create.category', self.workspace);

      //  Check if document is provided
      if (self.precondition['_id']) {
        self.submit_type = 'PUT';
        self.submit_url = "${tg.url('/precondition/simple/put')}";
        self.set('edit_mode', true);
        self.set('create.title', self.precondition['title']);
        self.set('create.question', self.precondition['condition'][0]);
        self.set('create.interested_response', self.precondition['condition'][1]);
        self.set('create._id', self.precondition['_id']);
      } else {
          self.set('create.question', self.qa_value);
      }


      self.set('errors', {});
      self.set('saving', false);
      self.set('response_type', null);
      self.set('categories', []);
      self.set('available_reponse', []);

      self.on('submit-form', function(event) {
        var all_var = self.get('create');
        self.createPreconditionSimple(all_var);
        return false;
      });

      self.loadCategory();
      self.loadQuestion();
    },
    loadCategory: function(callback) {
      var self = this;
      jQuery.get("${tg.url('/category/get_all')}",
          function(data) {
            self.set('categories', data['categories']);
            if (callback)
              callback();
          });
    },
    loadQuestion: function(callback) {
      var self = this;
      jQuery.get("${tg.url('/qa/get_single_or_multi_question', params=dict(workspace=workspace))}",
          function(data) {
            self.set('questions', data['questions']);
            if (callback)
              callback();
          });
    },
    createPreconditionSimple: function(field) {
      var self = this;
      var api_params = JSON.stringify(field);

      $.ajax({
        type: self.submit_type,
        url: self.submit_url,
        data: api_params,
        dataType: "json",
        processData: false,
        contentType: 'application/json'
      }).done(function(resp) {

          var redirect_to;
          if(self.question_content || self.question_title){
              redirect_to = "${tg.url('/qa/new', params=dict(workspace=workspace))}&question_content="
                      + self.get('question_content') + "&question_title=" + self.get('question_title') + "&precondition_id=" + resp['precondition_id'];
          }
          else{
               redirect_to = "${tg.url('/precondition/', params=dict(workspace=workspace))}";
          }

        self.set('create', {});
        self.set('saving', false);
        self.set('editing', false);

        if (resp.redirect_url)
          redirect_to = resp.redirect_url;
        window.location.replace(redirect_to);

      }).fail(function(jqXHR) {
        var data = jQuery.parseJSON(jqXHR.responseText);
        self.set('errors', data.errors);
        self.set('saving', false);
      });

    }
  });

  var ractive_precondition_simple = new PreconditionSimple({
      el: '#qa-ractive',
      precondition: ${Markup(h.script_json_encode(precondition))},
      workspace: '${workspace}',
      qa_value: "${value_of('qa_value', '')}"
  });

  ractive_precondition_simple.observe('create.question', function ( resp_id, oldValue ) {
    var self = this;
    if (!resp_id) return;

    self.set('available_reponse', []);
    jQuery.get("${tg.url('/qa/get_one')}", {'id':resp_id}, function(data) {
      self.set('available_reponse', data['qa']['answers'])
    })
  });

  ractive_precondition_simple.observe('create.answer_type', function ( int_resp, oldValue ) {
    if (int_resp == 'have_response')
      jQuery("#interested_response").hide();
    if (int_resp == 'what_response')
      jQuery("#interested_response").show();
  });

  ractive_precondition_simple.observe('create.interested_response', function (value) {
      var questions = ractive_precondition_simple.get('questions');
      if (typeof questions === "undefined") return;
      var by_id = function(v) { return v._id == ractive_precondition_simple.get('create.question'); };
      var question = questions.filter(by_id);
      if (!question.length) return;
      var q_title = question[0].title;
      var suffix = (value.length) ? " ⇒ " + value : '${_(" was compiled")}';
      ractive_precondition_simple.set('create.title', q_title+suffix);
  });
//]]>
</script>
</body>
</html>
