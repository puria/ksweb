<html py:extends="master.xhtml" py:strip="True">
<head py:block="head" py:strip="True">
    <title py:block="master_title">KS | Filters</title>
    <script id="PreconditionSimpleForm_template" type="text/html">
        <![CDATA[
        <form id="precondition-simple-form" class="form-horizontal" on-submit="submit-form">
            <div class="form-group" style="padding-top: 20px">
                <div class="col-md-6 text-left ks-section-name">
                    ${_('Advanced Filters')}
                </div>
                <div class="col-md-6 text-right">
                    {{#if saving}}
                    ${_('Saving...')}
                    {{else}}
                    <button type="submit" class="btn btn-primary">${h.material_icon('save')} ${_('Save')}</button>
                    {{/if}}
                </div>
            </div>
            <hr/>
            <div class="form-group {{errors.title ? 'has-error' : ''}}">
                <div class="col-md-3">
                    <input id="extra-fields-form-title" type="text" class="form-control" placeholder="${_('Label')}"
                           value="{{create.title}}"/>
                    {{#if errors.title}}
                    <span class="help-block">{{errors.title}}</span>
                    {{/if}}
                </div>
                <label for="extra-fields-form-question" class="help-text">${h.material_icon('help_outline')} ${_('This is a unique name that you will use to refer to this object in this workspace.')}</label>
            </div>
            <!-- <div class="form-group {{errors.category ? 'has-error' : ''}}">
                 <div class="col-md-3">
                     <select id="extra-fields-form-category" class="form-control" value="{{create.category}}">
                       {{#each categories}}
                         {{#if .name == 'Altro'}}
                           <option value="{{._id}}" selected>{{.name}}</option>
                         {{else}}
                           <option value="{{._id}}">{{.name}}</option>
                         {{/if}}
                       {{/each}}
                     </select>

                     {{#if errors.category}}
                     <span class="help-block">{{errors.category}}</span>
                     {{/if}}
                 </div>
             </div>-->

            <div class="form-group">
                <div class="col-md-12">
                    ${_('Operators')}:
                    <span onclick="ractive_precondition_simple.addOperator('and', '${tg.url("/img/and_dark.png")}')"><img
                            class="cursor-pointer" src="${tg.url('/img/and.png')}"></span>
                    <span onclick="ractive_precondition_simple.addOperator('or','${tg.url("/img/or_dark.png")}')"><img
                            class="cursor-pointer" src="${tg.url('/img/or.png')}"></span>
                    <span onclick="ractive_precondition_simple.addOperator('not', '${tg.url("/img/not_dark.png")}')"><img
                            class="cursor-pointer" src="${tg.url('/img/not.png')}"></span>
                    <span onclick="ractive_precondition_simple.addOperator('(', '${tg.url("/img/bracket_open_dark.png")}')"><img
                            class="cursor-pointer" src="${tg.url('/img/bracket_open.png')}"></span>
                    <span onclick="ractive_precondition_simple.addOperator(')', '${tg.url("/img/bracket_close_dark.png")}')"><img
                            class="cursor-pointer" src="${tg.url('/img/bracket_close.png')}"></span>
                </div>

            </div>

            <div class="col-md-12 form-group {{errors.conditions ? 'has-error' : ''}}">
                {{#conditions:i}}
                {{#if .type == 'operator'}}
                <span class="editor-element-operator">
                        <img src="{{.img_uri}}" alt="{{.content}}"/>
                    <span id="delete_elem" class="cursor-pointer"
                          on-click="deleteElem:{{i}}">${h.material_icon('add_circle_outline_rotate')}</span>
                    </span>
                {{/if}}
                {{#if .type == 'precondition'}}
                <span class="editor-element-precondition">
                    <span on-click="selectElem:{{.}}">{{.title}}</span>
                     <span id="delete_elem" class="cursor-pointer"
                           on-click="deleteElem:{{i}}">${h.material_icon('add_circle_outline_rotate')}</span>
                    </span>
                {{/if}}
                {{/items}}

                {{#if errors.conditions}}
                <span class="help-block">{{errors.conditions}}</span>
                {{/if}}
            </div>
        </form>
        ]]>
    </script>
</head>

<body py:block="body" py:strip="True">
<div id="qa-ractive" style="padding-top: 20px">

</div>
<script>
    /*
        Ractive in `conditions` contiene la struttura dati dei filtri e degli operatori:

        Gli elementi che pu√≤ contenere sono di due tipologie:
        -  Filtri
        -  Operatori logici

        Percio dovro differenziare i due casi tipo:
        type: [operator, precondition]
        content: [AND, OR, NOT, ( , ) , ObjId('filtro')
        img_uri: uri of image

        Devo fare poi solo il template che deve visualizzare tutti i vari elementi del template
    */

    <![CDATA[

    var PreconditionSimple = Ractive.extend({
        template: '#PreconditionSimpleForm_template',
        onconstruct: function (options) {
            var self = this;
            self.precondition = options['precondition'];
            self.edit_mode = false;
            self.submit_url = "${tg.url('/precondition/advanced/post')}";
            self.submit_type = 'POST';
            self.workspace = options['workspace'];
        },
        oninit: function () {
            var self = this;
            self.set('errors', {});
            self.set('saving', false);
            self.set('categories', []);
            self.set('conditions', []);
            self.set('create.category', self.workspace);
            var load_conditions = function () {
            };

            //  Check if document is provided
            if (!jQuery.isEmptyObject(self.precondition)) {
                self.submit_type = 'PUT';
                self.submit_url = '${tg.url('/precondition/advanced/put')}';
                self.set('edit_mode', true);
                self.set('create.title', self.precondition['title']);

                self.set('create._id', self.precondition['_id']);

                load_conditions = function () {
                    var _uri = {
                        'and': '${tg.url("/img/and_dark.png")}',
                        'or': '${tg.url("/img/or_dark.png")}',
                        'not': '${tg.url("/img/not_dark.png")}',
                        '(': '${tg.url("/img/bracket_open_dark.png")}',
                        ')': '${tg.url("/img/bracket_close_dark.png")}'
                    };

                    for (var i = 0; i < self.precondition['condition'].length; i++) {
                        var elem = self.precondition['condition'][i];
                        if (elem == 'and' || elem == 'or' || elem == 'not' || elem == '(' || elem == ')')
                            self.addOperator(elem, _uri[elem]);
                        else {
                            for (var j = 0; j < self.get('preconditions').length; j++) {
                                for (var k = 0; k < self.get('preconditions')[j]['precondition'].length; k++) {
                                    if (self.get('preconditions')[j]['precondition'][k]._id == elem)
                                        self.addPrecondition(elem, self.get('preconditions')[j]['precondition'][k].title);
                                }
                            }
                        }
                    }
                };
            }


            self.on('submit-form', function (event) {
                var all_var = self.get('create');
                console.log("Sending...");
                console.log(all_var);
                all_var['conditions'] = self.get('conditions');
                console.log("add the conditions");
                console.log(all_var)
                self.createPreconditionAdvanced(all_var);
                return false;
            });

            //self.loadCategory();
            self.loadQuestion();
            self.loadPreconditions(load_conditions);
        },
        /*loadCategory: function (callback) {
            var self = this;
            jQuery.get("${tg.url('/category/get_all')}",
                    function (data) {
                        self.set('categories', data['categories']);
                        if (callback)
                            callback();
                    });
        },*/
        loadQuestion: function (callback) {
            var self = this;
            jQuery.get("${tg.url('/qa/get_single_or_multi_question', params=dict(workspace=workspace))}",
                    function (data) {
                        self.set('questions', data['questions']);
                        if (callback)
                            callback();
                    });
        },
        loadPreconditions: function (callback) {
            var self = this;
            jQuery.get("${tg.url('/precondition/sidebar_precondition', params=dict(workspace=workspace))}",
                    function (data) {
                        self.set('preconditions', data['precond']);
                        console.log(self.get('preconditions'));
                        if (callback)
                            callback();
                    });
        },
        addOperator: function (operator, img_uri) {
            var self = this;
            console.log("add operator:" + operator);
            var elem = {
                'type': 'operator',
                'content': operator,
                'img_uri': img_uri
            };

            self.get('conditions').push(elem);
        },
        addPrecondition: function (id, title) {
            var self = this;
            console.log("add _id:" + id);
            console.log("add title:" + title);
            var elem = {
                'type': 'precondition',
                'content': id,
                'title': title
            };

            self.get('conditions').push(elem);
        },
        createPreconditionAdvanced: function (field) {
            var self = this;
            self.set('saving', true);
            console.log("Sending:");
            console.log(JSON.stringify(field));

            var api_params = JSON.stringify(field);
            $.ajax({
                type: self.submit_type,
                url: self.submit_url,
                data: api_params,
                dataType: "json",
                processData: false,
                contentType: 'application/json'
            }).done(function (resp) {
                var redirect_to = "${tg.url('/precondition/', params=dict(workspace=workspace))}";
                self.set('create', {});
                self.set('saving', false);
                self.set('editing', false);

                if (resp.redirect_url)
                    redirect_to = resp.redirect_url;
                window.location.replace(redirect_to);

            }).fail(function (jqXHR) {
                var data = jQuery.parseJSON(jqXHR.responseText);
                console.log("fail");
                console.log(data);
                self.set('errors', data.errors);
                self.set('saving', false);
            });

        }
    });
    ]]>
</script>
<script>
    var ractive_precondition_simple = new PreconditionSimple({
        el: '#qa-ractive',
        precondition: ${Markup(h.script_json_encode(precondition))},
        workspace: '${workspace}'
    });

    ractive_precondition_simple.on('selectElem', function (event, elem) {
        var self = this;
        console.log("Selected element: " + elem);
        console.log(elem);
    });

    ractive_precondition_simple.on('deleteElem', function (event, elem) {
        var self = this;
        console.log("Element to remove: " + elem);
        self.splice('conditions', elem, 1)
    });


</script>
</body>
</html>
