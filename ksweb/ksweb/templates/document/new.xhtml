<html py:extends="master.xhtml" py:strip="True">
<head py:block="head" py:strip="True">
    <title py:block="master_title">KS | Documenti</title>

    <script src="${tg.url('/javascript/ckeditor/ckeditor.js')}"></script>

    <script id="DocumentForm_template" type="text/html">
        <![CDATA[
        <form id="document-form" class="form-horizontal" on-submit="submit-form">
            <div class="form-group" style="padding-top: 20px">
                <div class="col-md-6 text-left ks-section-name">
                    Document
                </div>
                <div class="col-md-6 text-right">
                    {{#if create._id}}
                    <!-- Button trigger modal -->
                    <button type="button" class="btn btn-success" data-toggle="modal" data-target="#createQuestionary">
                    ${h.material_icon('create')} New questionary
                    </button>
                    {{/if}}

                    {{#if saving}}
                    Saving...
                    {{else}}
                    <button type="submit" class="btn btn-primary">${h.material_icon('save')} Save</button>
                    {{/if}}
                </div>
            </div>

            <!-- Modal -->
            <div class="modal fade" id="createQuestionary" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
                <form on-submit="new_questionary">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span
                                        aria-hidden="true">&times;</span></button>
                                <h4 class="modal-title" id="myModalLabel">Create a new questionary</h4>
                            </div>
                            <div class="modal-body">
                                Insert the title:
                                <input id="form-title" type="text" class="form-control" placeholder="Title"
                                       value="{{questionary_title}}"/>
                                {{#if errors.questionary_title}}
                                <span class="help-block">{{errors.questionary_title}}</span>
                                {{/if}}
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                                <button type="button"
                                        onclick="ractive_document.new_questionary('{{questionary_title}}')"
                                        class="btn btn-primary">New questionary
                                </button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>

            <hr/>
            <div class="form-group {{errors.title ? 'has-error' : ''}}">
                <div class="col-md-3">
                    <input id="extra-fields-form-title" type="text" class="form-control" placeholder="Titolo"
                           value="{{create.title}}"/>
                    {{#if errors.title}}
                    <span class="help-block">{{errors.title}}</span>
                    {{/if}}
                </div>
            </div>
            <div class="form-group {{errors.category ? 'has-error' : ''}}">
                <div class="col-md-3">
                    <select id="extra-fields-form-category" class="form-control" value="{{create.category}}">
                      {{#each categories}}
                        {{#if .name == 'Altro'}}
                          <option value="{{._id}}" selected>{{.name}}</option>
                        {{else}}
                          <option value="{{._id}}">{{.name}}</option>
                        {{/if}}
                      {{/each}}
                    </select>

                    {{#if errors.category}}
                    <span class="help-block">{{errors.category}}</span>
                    {{/if}}
                </div>
            </div>
            <div class="form-group">
                 <textarea name="ks_editor"></textarea>
            </div>
        </form>
        ]]>
    </script>
</head>

<body py:block="body" py:strip="True">
<div id="document-ractive" style="padding-top: 20px">

</div>
<script>

    <![CDATA[

    var Document = Ractive.extend({
        template: '#DocumentForm_template',
        onconstruct: function (options) {
            var self = this;
            //  Default settings
            self.submit_type = 'POST';
            self.submit_url = '${tg.url('/document/post')}';
            self.edit_mode = false;
            self.document = options['document'];
        },
        oninit: function () {
            var self = this;

            //  Check if document is provided
            if (!jQuery.isEmptyObject(self.document)) {
                self.edit_mode = true;
                self.submit_type = 'PUT';
                self.submit_url = '${tg.url('/document/put')}';

                //Set the document value as default
                self.set('create.title', self.document['title']);
                self.set('create.category', self.document['_category']);
                self.set('create._id', self.document['_id']);
            }

            //clear array
            self.set('create.content', []);
            self.set('errors', {});
            self.set('saving', false);
            self.set('categories', []);

            self.loadCategory();
            self.on('submit-form', function (event) {
                var all_var = self.get('create');
                all_var['content'] = self.get('create.content');
                console.log(all_var)
                self.createDocument(all_var);
                return false;
            });

        },
        loadCategory: function (callback) {
            var self = this;
            jQuery.get("${tg.url('/category/get_all')}",
                    function (data) {
                        self.set('categories', data['categories']);
                        if (callback)
                            callback();
                    });
        },
        add_widget_to_editor: function(id, title, type){
          console.log('add_widget_to_editor:', id, title, type);
          var editor = CKEDITOR.instances.ks_editor;
          var ks_id = 'ks_id-' + type + '_' + id;
          var class_ = 'objplaceholder ' + type + ' ' + type + '-widget ' + ks_id;

          var element =  editor.document.createElement( 'span', {attributes: {'class': class_}});
          element.setText(title);

          if (type == 'output'){
            element.on("click", function(){
              var url = "${tg.url('/output/edit')}"+"?_id="+id;
              var win = window.open(url, '_blank');
              win.focus();
            });
          }

          editor.insertElement(element);
          var widget = editor.widgets.initOn( element, 'objplaceholder' );

        },
        createDocument: function (field) {
            var self = this;
            self.set('saving', true);
            console.log("Sending:");
            console.log(JSON.stringify(field));

            field['ks_editor'] = CKEDITOR.instances.ks_editor.getData();

            var api_params = JSON.stringify(field);
            $.ajax({
                type: self.submit_type,
                url: self.submit_url,
                data: api_params,
                dataType: "json",
                processData: false,
                contentType: 'application/json'
            }).done(function (data) {
                self.set('create', {});
                self.set('saving', false);
                self.set('editing', false);
                console.log(data);
                window.location.replace("${tg.url('/document/')}");

            }).fail(function (jqXHR) {
                var data = jQuery.parseJSON(jqXHR.responseText);
                console.log("fail");
                console.log(data);
                self.set('errors', data.errors);
                self.set('saving', false);
                self.set('create.content', []);
            });
        },
        new_questionary: function (title) {
            var self = this;
            self.set('saving', true);
            console.log("Sending:");
            var questionary_params = {
                'questionary_title': title,
                'document_id': self.get('create._id')
            };
            console.log(JSON.stringify(questionary_params));

            var api_params = JSON.stringify(questionary_params);
            $.ajax({
                type: 'POST',
                url: '${tg.url('/questionary/create')}',
                data: api_params,
                dataType: "json",
                processData: false,
                contentType: 'application/json'
            }).done(function (data) {
                self.set('create', {});
                self.set('saving', false);
                self.set('editing', false);
                console.log(data);
                window.location.replace("${tg.url('/questionary/')}");

            }).fail(function (jqXHR) {
                var data = jQuery.parseJSON(jqXHR.responseText);
                console.log("fail");
                console.log(data);
                self.set('errors', data.errors);
                self.set('saving', false);
            });


        }
    });
    ]]>
</script>
<script>
    var ractive_document = new Document({
        el: '#document-ractive',
        document: ${Markup(h.script_json_encode(document))},
    });

    ractive_document.on('showOutputDetails', function (event, elem) {
        $.get("${tg.url('/output/human_readable_details', qualified=True)}", {_id: elem.content}, function (data) {
            alert(JSON.stringify(data['output'], null, 2));
        });

    });

</script>

  <script>
    CKEDITOR.replace( 'ks_editor', {
      extraPlugins: 'objplaceholder'
    });
    CKEDITOR.instances.ks_editor.setData(${Markup(h.script_json_encode(document.upcast if document else '' ))});

  </script>
</body>
</html>
